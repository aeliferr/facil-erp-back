// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  vendor
}

model User {
  id String @id @db.Uuid @default(uuid())
  username String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  fullName String @db.VarChar(255)
  role Role @default(vendor)

  budgets Budget[]
  
  @@map("users")
}

enum ClientType {
  fisica
  juridica
}

model Client {
  id String @id @db.Uuid @default(uuid())
  name String @db.VarChar(255)
  type ClientType
  phone String? @db.VarChar(11)
  rg String? @db.VarChar(9)
  cpf String? @db.VarChar(11)
  cnpj String? @db.VarChar(14)
  zipcode String @db.Char(8)
  street String @db.VarChar(255)
  number String @db.VarChar(50)
  complement String? @db.VarChar(255)
  neighborhood String @db.VarChar(255)
  city String @db.VarChar(255)
  state String @db.VarChar(255)

  budgets Budget[]
  
  @@map("clients")
}

model Budget {
  id String @id @db.Uuid @default(uuid())
  client Client @relation(fields: [clientId], references: [id])
  clientId String @db.Uuid
  vendor User @relation(fields: [vendorId], references: [id])
  vendorId String @db.Uuid

  budgetItems BudgetItem[]
  @@map("budgets")
}

model BudgetItem {
  id String @id @db.Uuid @default(uuid())
  description String
  unitValue   Float
  quantity    Int
  
  budget Budget @relation(fields: [budgetId], references: [id])
  budgetId String @db.Uuid

  @@map("budgetItems")
}