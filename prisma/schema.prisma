// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  vendor
}

model Tenant {
  id         String       @id @default(uuid()) @db.Uuid
  name       String       @db.VarChar(255)
  document   String       @unique @db.VarChar(14)
  personType PersonType
  createdAt  DateTime     @default(now())
  Client     Client[]
  Budget     Budget[]
  Contract   Contract[]
  BudgetItem BudgetItem[]
  User       User[]

  @@map("tenants")
}

model PasswordReset {
  id        String   @id @default(uuid())
  email     String   @db.VarChar(255)
  token     String   @unique
  expiresAt DateTime?
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  fullName String @db.VarChar(255)
  role     Role   @default(admin)

  budgets  Budget[]
  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  tenantId String   @db.Uuid

  @@map("users")
}

enum PersonType {
  fisica
  juridica
}

model Client {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @db.VarChar(255)
  type         PersonType
  phone        String?    @db.VarChar(11)
  rg           String?    @db.VarChar(9)
  cpf          String?    @db.VarChar(11)
  cnpj         String?    @db.VarChar(14)
  zipcode      String?    @db.Char(8)
  street       String?    @db.VarChar(255)
  number       String?    @db.VarChar(50)
  complement   String?    @db.VarChar(255)
  neighborhood String?    @db.VarChar(255)
  city         String?    @db.VarChar(255)
  state        String?    @db.VarChar(255)

  budgets  Budget[]
  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  tenantId String   @db.Uuid

  @@map("clients")
}

enum BudgetStatus {
  pending
  done
  cancelled
}

model Budget {
  id                                String        @id @default(uuid()) @db.Uuid
  status                            BudgetStatus  @default(pending)
  client                            Client        @relation(fields: [clientId], references: [id])
  clientId                          String        @db.Uuid
  vendor                            User          @relation(fields: [vendorId], references: [id])
  vendorId                          String        @db.Uuid
  paymentMethod                     PaymentMethod
  installment                       Int           @default(1)
  downPaymentPercentage             Int           @default(0)
  daysAfterDefinitionAndMeasurement Int           @default(60)
  workDays                          Boolean       @default(false)
  contract                          Contract?     @relation(fields: [contractid], references: [id])
  contractid                        String?       @db.Uuid

  budgetItems BudgetItem[]
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  tenantId    String       @db.Uuid

  @@map("budgets")
}

enum PaymentMethod {
  debit
  credit
  pix
  boleto
  money
}

model Contract {
  id              String    @id @default(uuid()) @db.Uuid
  definitionDate  DateTime? @db.Date
  measurementDate DateTime? @db.Date
  signature       String    @db.VarChar(250)
  Budget          Budget[]
  tenant          Tenant    @relation(fields: [tenantId], references: [id])
  tenantId        String    @unique @db.Uuid

  @@map("contracts")
}

model BudgetItem {
  id          String @id @default(uuid()) @db.Uuid
  description String
  unitValue   Float
  quantity    Int

  budget   Budget @relation(fields: [budgetId], references: [id])
  budgetId String @db.Uuid

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String @db.Uuid

  @@map("budgetItems")
}
